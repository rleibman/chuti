schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

scalar Json

scalar LocalDateTime

enum UserEventType {
  AbandonedGame
  Connected
  Disconnected
  JoinedGame
  Modified
}

type Mutations {
  newGame(satoshiPerPoint: Int!): Json
  newGameSameUsers(value: Int!): Json
  joinRandomGame: Json
  abandonGame(value: Int!): Boolean
  inviteByEmail(name: String!, email: String!, gameId: Int!): Boolean
  startGame(value: Int!): Boolean
  inviteToGame(userId: Int!, gameId: Int!): Boolean
  acceptGameInvitation(value: Int!): Json
  declineGameInvitation(value: Int!): Boolean
  cancelUnacceptedInvitations(value: Int!): Boolean
  friend(value: Int!): Boolean
  unfriend(value: Int!): Boolean
  play(gameId: Int!, gameEvent: Json!): Boolean
}

type Queries {
  getGame(value: Int!): Json
  getGameForUser: Json
  getFriends: [User!]
  getGameInvites: [Json!]
  getLoggedInUsers: [User!]
  getHistoricalUserGames: [Json!]
}

type Subscriptions {
  gameStream(gameId: Int!, connectionId: String!): Json
  userStream(value: String!): UserEvent
}

type User {
  id: Int
  email: String!
  name: String!
  created: LocalDateTime!
  active: Boolean!
  deleted: Boolean!
  isAdmin: Boolean!
}

type UserEvent {
  user: User!
  userEventType: UserEventType!
  gameId: Int
}